"""
Django settings for Sadaqa project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rm5fm6d&@iqxzo733+-l9n=x3gir1i((l7@4qdg-*4kain9+qi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver']


# Application definition

INSTALLED_APPS = [
    # Local apps
    "users.apps.UsersConfig",
    "projects.apps.ProjectsConfig",
    "engagement.apps.EngagementConfig",
    "moderations.apps.ModerationsConfig",
    "donation.apps.DonationConfig",
    # =========================================
    "crispy_forms",
    "crispy_bootstrap5",
    # Django core apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # Added sites framework
    # Third-party apps
    "rest_framework",  # Django REST Framework for API development
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "rest_framework_simplejwt",
    "phonenumber_field",  # Adds phone number validation and formatting.
    "django_countries",  # Simplifies country dropdowns and data storage (e.g., "EG" for Egypt).
    # need to install pip install django-allauth to use the apps below
    "allauth",  # Core library for authentication (logins, signups)
    "allauth.account",  # Handles email/password-based accounts
    "allauth.socialaccount",  # Manages social media logins (Facebook, Google, etc.)
    "allauth.socialaccount.providers.facebook",  # Adds Facebook login support
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # default
    "allauth.account.auth_backends.AuthenticationBackend",  # allauth
]

SOCIALACCOUNT_PROVIDERS = {
    "facebook": {
        "APP": {...},
        "METHOD": "oauth2",
        "SCOPE": ["email", "public_profile"],
        "EXCHANGE_TOKEN": True,
        "VERIFIED_EMAIL": True,
        "VERSION": "v13.0",
    }
}
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # Add allauth's middleware here
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'Sadaqa.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),  # For project-wide base.html
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'Sadaqa.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "sadaqa",
        "USER": "postgres",
        "PASSWORD": "123",
        "HOST": "localhost",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = "users.CustomUser"

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

# Sites Framework (if using social auth or flatpages)
REST_USE_JWT = True
JWT_AUTH_COOKIE = "sadaqa-auth"

SITE_ID = 1

CRISPY_TEMPLATE_PACK = "bootstrap5"


# redirect users handling
LOGIN_REDIRECT_URL = 'categories-list-page'
ACCOUNT_LOGOUT_REDIRECT_URL = "categories-list-page"
ACCOUNT_SIGNUP_REDIRECT_URL = LOGIN_REDIRECT_URL

ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = LOGIN_REDIRECT_URL
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = LOGIN_REDIRECT_URL

ACCOUNT_PASSWORD_RESET_REDIRECT_URL = "account_reset_password"
ACCOUNT_PASSWORD_RESET_DONE_REDIRECT_URL = LOGIN_REDIRECT_URL

ACCOUNT_ADAPTER = "users.adapters.CustomAccountAdapter"

# to add more field in signup
ACCOUNT_FORMS = {"signup": "users.forms.CustomSignupForm"}

SOCIALACCOUNT_AUTO_SIGNUP = True


# Ensures phone numbers are validated specifically for Egypt
# Works with phonenumber_field package
PHONENUMBER_DEFAULT_REGION = "EG"  # Validate as Egyptian numbers


# =================== email settings =====================
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Force email verification
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1  # 24h expiration
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # Immediate confirmation on link click
ACCOUNT_AUTHENTICATION_METHOD = "email"  # Login with email
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

# When Django app tries to send an email (like for password reset or confirmation),
# instead of actually sending it, Django will just print the email content in the console (terminal).
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # Dev only

ACCOUNT_DELETE_CONFIRMATION = True  
ACCOUNT_DELETE_PASSWORD_CONFIRMATION = True  

# ====================For production===============================
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'your-smtp-server.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your@email.com'
# EMAIL_HOST_PASSWORD = 'your-password'


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
